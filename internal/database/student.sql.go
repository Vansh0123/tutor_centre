// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: student.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students WHERE name=$1
RETURNING id, created_at, updated_at, name, subject, class, fees, fee_status
`

func (q *Queries) DeleteStudent(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, name)
	return err
}

const registerStudent = `-- name: RegisterStudent :one
INSERT INTO students(id, created_at, updated_at, name,subject,class,fees,fee_status)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING id, created_at, updated_at, name, subject, class, fees, fee_status
`

type RegisterStudentParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Subject   string
	Class     string
	Fees      int32
	FeeStatus string
}

func (q *Queries) RegisterStudent(ctx context.Context, arg RegisterStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, registerStudent,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Subject,
		arg.Class,
		arg.Fees,
		arg.FeeStatus,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Subject,
		&i.Class,
		&i.Fees,
		&i.FeeStatus,
	)
	return i, err
}

const updateFeeStatus = `-- name: UpdateFeeStatus :exec
UPDATE students SET fee_status=$1 WHERE name=$2
`

type UpdateFeeStatusParams struct {
	FeeStatus string
	Name      string
}

func (q *Queries) UpdateFeeStatus(ctx context.Context, arg UpdateFeeStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateFeeStatus, arg.FeeStatus, arg.Name)
	return err
}
